# Usage
#   docker-compose build --no-cache
#   docker-compose up
#
# Example in Bash
#   export ATERNITY_SAAS_SERVER_HOST="agents.apm.myaccount.aternity.com"
#   export ATERNITY_CUSTOMER_ID="12341234-12341234-13241234"
#   docker-compose build --no-cache
#   docker-compose up
#
# Example in PowerShell
#   $env:ATERNITY_SAAS_SERVER_HOST="agents.apm.myaccount.aternity.com"
#   $env:ATERNITY_CUSTOMER_ID="12341234-12341234-13241234"
#   docker-compose build --no-cache
#   docker-compose up

version: '3.4'
services:

  apmcollector:
    image: registry.hub.docker.com/aternity/apm-collector:latest
    container_name: apm-collector
    environment:
      SERVER_URL: "wss://${ATERNITY_SAAS_SERVER_HOST}/?RPM_AGENT_CUSTOMER_ID=${ATERNITY_CUSTOMER_ID}"
    ports:
      # Uncomment the telemetry protocol used by the application

      # OpenTelemetry, https://opentelemetry.io
      # - "4318:4318/tcp"     # OpenTelemetry OTLP JSON/Protobuf over HTTP
      - "55681:55681/tcp" # OpenTelemetry OTLP JSON/Protobuf over HTTP
      # - "4317:4317/tcp"   # OpenTelemetry OTLP over gRPC
      
      # Jaeger, https://www.jaegertracing.io
      # - "14268:14268/tcp" # Jaeger Thrift Binary over HTTP
      # - "6831:6831/udp"   # Jaeger Thrift Compact
      # - "6832:6832/udp"   # Jaeger Thrift Binary
      
      # Zipkin, https://zipkin.io
      - "9411:9411/tcp"   # Zipkin v2 json/protobuf and v1 json/thrift
      # - "5775:5775/udp"   # Jaeger's Thrift support for Zipkin v1

  flightsearch:
    build: ./FlyFast-FlightSearch
    container_name: Search
    environment:
      COLLECTOR_URL: http://apm-collector:9411/api/v2/spans
    ports:
      - "8080:8080"

  webui:
    build: ./FlyFast-WebUI
    container_name: WebUI
    ports:
      - "80:80"